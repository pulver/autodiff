//           Copyright Matthew Pulver 2018 - 2019.
// Distributed under the Boost Software License, Version 1.0.
//      (See accompanying file LICENSE_1_0.txt or copy at
//           https://www.boost.org/LICENSE_1_0.txt)

#include <boost/math/differentiation/autodiff.hpp>
#include <iostream>

using namespace boost::math::differentiation;

template<typename W,typename X,typename Y,typename Z>
autodiff::promote<W,X,Y,Z> f(const W& w, const X& x, const Y& y, const Z& z)
{
  using namespace std;
  return exp(w*sin(x*log(y)/z) + sqrt(w*z/(x*y))) + w*w/tan(z);
}

// Derivatives calculated from symbolic differentiation by Mathematica for comparison.
const double answers[] = { 19878.406289804349223, 20731.748382749395173, 14667.607676239390148, 1840.5599364498131187,
  -9219.3180052370721296, -7272.3006340128117838, -2135.2963700622839242, 3095.0810272518467995, 4249.0267629086156274,
  2063.9890610627344166, -885.52841148764960841, -1962.1334204417431580, -1846.8998307870845186, -160.95901276032957552,
  1091.0394123416339941, 452.43955743452299467, 666.40139227277049900, -415.64641143336291078, -625.14641790399863613,
  369.94916697726171101, -24330.896138493893431, -18810.416051756267521, -4890.4061227023590999, 8833.0050547689764171,
  8484.3507396816137478, 3097.2041512403988935, -3255.0451367834406121, -4342.7785533321930979, -2407.9872379065234860,
  861.11739164703000843, 2436.7437257633086191, -19.246496107338277838, 187.78551488705117144, -1259.4660633352121952,
  -709.68605239721582613, 1423.0005586086045369, 484.92081333892339591, 763.97468850744531805, -327.41629182280555682,
  -1122.3377072484945211, 23973.060071923469893, 8840.5431517787968699, -9082.5710332215493783, -12270.273782892587177,
  -4320.4340714205998547, 3281.3519677072808985, 5880.3362630834187672, -1288.4827852197065498, -803.97135376265805266,
  -2986.3872453316983903, -586.73168598226583063, 3929.0731892807393562, 1453.7282809838266301, 1037.8780716859538297,
  -1482.7458052774013366, -1877.1347929338288106, -931.71387103692982071, 254.65655904203226329, 1391.2480647456116638,
  -431.48205631541379551, 16975.340053651795550, 19662.603563033417098, 15765.851307040200043, 3972.1550361959370138,
  -8681.7485397897205125, -7703.1830424603876567, -3049.7086965695187740, 2971.4696859922708762, 4370.1964998575500257,
  2524.6324733574356708, -656.60800002366790717, -2423.4529173252581326, -2074.9876642042632042, -381.22537949881329845,
  1219.5072457919973510, 805.38022398408368773, 838.40041900589123805, -390.61251971089838316, -828.20854892982357583,
  293.89998544549947901, -22965.859858439519778, -20026.691015299296217, -7316.0927450633559965, 8632.4661339726146593,
  8987.0468828704522662, 4199.9253995361375411, -2958.4298508960628932, -5665.5638912186240622, -2945.4045522503416159,
  555.65662724782625247, 2936.7964035500791392, 651.51916507471100081, 444.76294274861551486, -1390.9896717990958013,
  -1142.8614689467638609, 1541.9787231173408435, 455.71460632938144702, 998.79435039403570373, -204.84855819811212954,
  -1560.3541154604787861, 25278.294506052472235, 11873.223371790464699, -8242.1873033688781033, -15939.980564174657519,
  -5648.8335396980314868, 2751.5139261227171185, 7349.4320024790771292, 194.99725459803711274, -402.81568576826882656,
  -3518.8719086830633712, -1494.3047934746826191, 4640.9275094260800875, 1585.7577052032271420, 1565.1699924044071379,
  -1513.2598097335400189, -2974.4378726746800928, -1203.2362926538234416, 72.524259498791533840, 1871.6252742534199495,
  -2.4899843373796816664, 14462.744235186331026, 18367.747409164327117, 16565.763244996739614, 6054.3152526511029520,
  -8084.9812719820301461, -7988.3143591282012972, -3989.3193469414926985, 2616.7211865346490167, 4420.8592709704865621,
  2973.0335197645479091, -324.14530169827137080, -2843.2420399589692219, -2281.4618061432895177, -642.93532295820559249,
  1299.2872741769553585, 1238.5970833720697622, 1021.3340427708481651, -329.05293450692710796, -1046.2543015440520751,
  134.73430395544806552, -21431.416435076611924, -20856.882814790157847, -9829.2619705919309076, 7806.8586470778118280,
  9319.7000856495681801, 5319.8987680257582564, -2387.9548264668417364, -6958.2985251653597607, -3468.5391063919725607,
  130.41672533427094017, 3371.1399302351759874, 1569.2326780049081053, 750.09121011790652458, -1462.2572096265974522,
  -1661.5778096302406157, 1509.6285286038691333, 383.89509025808162595, 1248.0510963436380133, 17.185695642652602749,
  -2038.0245980026048531, 26118.981320178235148, 14943.619434822279033, -6650.6862622761310724, -19519.815295474040679,
  -6983.1902365008486475, 1899.2975028736889830, 8715.0036526429634882, 2368.1506906818643019, 136.89207930934828319,
  -3954.7327061634171420, -2673.5564402311867864, 5078.4839352490435947, 1643.4591437212048172, 2182.2169795063802937,
  -1345.8388309636205015, -4309.2853506291084135, -1488.0508699224178177, -228.05849430703437209, 2373.3989404257091779,
  773.84813281039280582, 12294.403877378555486, 16977.349665718583019, 17057.174756225031750, 8121.1897585118309359,
  -7458.4435414062843899, -8134.1311608827380587, -4912.8811586137844196, 2030.6531360989337179, 4407.4905277094127309,
  3392.4345688258927524, 104.03723558415061987, -3180.8176204844632144, -2460.5239870750694373, -938.22093140691334328,
  1315.2469055718764567, 1735.8623924059921882, 1209.7596572231669549, -227.33200545666422971, -1266.1262099919292594,
  -123.07945723381491568, -19806.907943338346855, -21314.816354405752293, -12317.583844301308050, 6349.4186598882814744,
  9489.8196876965277351, 6409.5389484563099944, -1550.2817990131252676, -8109.7111997852175121, -3957.8403302968748777,
  -404.07965558366678588, 3693.6143513011819801, 2716.1466583227900648, 1094.5910866413989005, -1456.2696455499464209,
  -2244.3806087356369623, 1268.5938915562618711, 265.22067303277493466, 1496.0915787786394884, 354.61373510477227819,
  -2508.4771100486841292, 26517.861408751573247, 17922.983877419151441, -4328.2591421276680409, -22704.702459400809491,
  -8268.6137471737389714, 740.40560743926114647, 9848.9001828360350810, 5213.5983414762103377, 801.24629237235082333,
  -4241.8701339207678459, -4092.2413558685505706, 5074.4359092060839438, 1607.7653292548209160, 2861.1556511165675262,
  -918.93105463172960902, -5803.2113236460920193, -1767.5418979944773144, -663.06462075200757263, 2837.9031946139384145,
  1976.3196007477977178 };

int main()
{
  constexpr int Nw=3; // Max order of derivative to calculate for w
  constexpr int Nx=2; // Max order of derivative to calculate for x
  constexpr int Ny=4; // Max order of derivative to calculate for y
  constexpr int Nz=3; // Max order of derivative to calculate for z
  const autodiff::variable<double,Nw> w(11);
  const autodiff::variable<double,0,Nx> x(12);
  const autodiff::variable<double,0,0,Ny> y(13);
  const autodiff::variable<double,0,0,0,Nz> z(14);
  const auto v = f(w,x,y,z); // auto = autodiff::variable<double,Nw,Nx,Ny,Nz>
  int ia=0;
  double max_relative_error=0;
  for (int iw=0 ; iw<=Nw ; ++iw)
    for (int ix=0 ; ix<=Nx ; ++ix)
      for (int iy=0 ; iy<=Ny ; ++iy)
        for (int iz=0 ; iz<=Nz ; ++iz)
        {
          const double value = v.derivative(iw,ix,iy,iz);
          const double error = std::fabs(value/answers[ia++] - 1);
          max_relative_error = std::max(error, max_relative_error);
        }
  std::cout << "max_relative_error = " << std::setprecision(3) << max_relative_error
    << " out of " << ia << " calculated values." << std::endl;
  return 0;
}
/*
Output:
max_relative_error = 6.82e-13 out of 240 calculated values.
**/
